* partial-recall

#+BEGIN_HTML
<a href='https://coveralls.io/github/Walheimat/partial-recall?branch=trunk'>
    <img
        src='https://coveralls.io/repos/github/Walheimat/partial-recall/badge.svg?branch=trunk'
        alt='Coverage Status'
    />
</a>
#+END_HTML

=partial-recall= provides a narrow buffer scope built on top of
=tab-bar-mode=. It turns each tab into a living (that is: forgetful)
workspace. Each file buffer that is first visited in a tab will be
associated with that tab until a limit is met whereupon the oldest
buffer is forgotten. If a newly visited buffer is already associated
with another tab, it may be reclaimed (automatically or manually). If
all buffers were visited relatively recently, the size of the limit
increases (for that tab).

** Installation

If you use =straight= or =quelpa=, you know what to do.

If you're on Emacs >29, I recommend using =package-vc-install=.

Alternatively, provided you have Cask, you can install the package
with =make package-install= after initializing the submodule =dinghy=.

** Configuration

=partial-recall= will turn on =tab-bar-mode= if it isn't already turned
on. =partial-recall-mode= will make sure all newly created frames are
taken into account.

#+begin_src emacs-lisp
(use-package partial-recall
  :custom
  (partial-recall-handle-delay 4) ;; The delay before a buffer is handled (remembered or re-inforced).
  (partial-recall-buffer-limit 10) ;; The number of buffers in the ring.
  (partial-recall-max-age 1800) ;; The age (in seconds) that will allow the ring to grow.
  (partial-recall-reclaim-min-age 3600) ;; The age (in seconds) that will allow reclaiming.
  (partial-recall-repress t) ;; Whether forgotten buffers should (eventually) be killed.
  (partial-recall-auto-implant t) ;; Whether moments should get implanted after meeting a threshold.
  (partial-recall-auto-implant-threshold 4) ;; That very threshold.
  (partial-recall-auto-switch t) ;; Whether to switch to a moment's tab automatically.
  (partial-recall-mode-lighter " pr") ;; What you will in the mode-line.
  (partial-recall-record-triggers '(consult-buffer)) ;; Commands that might obscure buffers before they are handled.
  (partial-recall-log nil) ;; Whether to log actions.
  (partial-recall-log-level 1) ;; Info log level (0 is debug).
  (partial-recall-log-prefix "PR: ") ;; Message prefix for log messages.
  (partial-recall-filter '("COMMIT_EDITMSG")) ;; Regexes of names that should be ignored.

  :config
  (partial-recall-mode)

  ;; If you use `consult', you can add the provided buffer source.
  (with-eval-after-load 'consult
    (add-to-list
     'consult-buffer-sources
     'partial-recall--consult-buffer-source))

  ;; If you use `marginalia', you can annotate the buffer-based commands.
  (with-eval-after-load 'marginalia
    (setq marginalia-command-categories
          (append
           marginalia-command-categories
           '((partial-recall-forget . buffer)
             (partial-recall-implant . buffer)
             (partial-recall-lift . buffer)
             (partial-recall-reclaim . buffer)
             (partial-recall-remember . buffer)
             (partial-recall-switch-to-buffer . buffer)))

  :bind-keymap
  (("C-c b" . partial-recall-command-map)))
#+end_src

I suggest to just bind the command map as shown above, otherwise you
probably want to bind the following commands:

- =partial-recall-forget=
- =partial-recall-implant=
- =partial-recall-lift=
- =partial-recall-menu=
- =partial-recall-reclaim=
- =partial-recall-remember=
- =partial-recall-switch-to-buffer=
